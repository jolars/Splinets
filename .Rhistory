#Verifying the orthogonalization
gm = gramian(sodyeq$os) #evaluation of the inner products
diag(gm)
sum(gm - diag(diag(gm)))
#--------------------------------------------#
#---Dyadic splinet, unequally spaced knots---#
#--------------------------------------------#
xi = c(0, sort(runif(n_knots)), 1)
sody = splinet(xi, k)
plot(sody$bs) #Plotting B-splines
plot(sody$os) #Plotting Splinet
#Verifying the orthogonalization
gm = gramian(sody$os) #evaluation of the inner products
diag(gm)
sum(gm - diag(diag(gm)))
#-----------------------------------------#
#---Bspline basis, equally spaced knots---#
#-----------------------------------------#
n = 15
xi = seq(0,1,length.out = n+2)
order = 2
bs = splinet(xi, order, type = 'bs')
plot(bs$bs)
#---------------------------------------------#
#---Bspline basis, non-equally spaced knots---#
#---------------------------------------------#
n = 6
xi = c(0,sort(runif(n)),1)
order = 3
so = splinet(xi, order, type = 'bs') #unnormalized version
plot(so$bs)
so1 = splinet(type='bs',Bsplines=so$bs,norm=TRUE) #normalized version
plot(so1$bs)
#-------------------------------------------------#
#---Gram-Schmidt osplines, equally spaced knots---#
#-------------------------------------------------#
so = splinet(xi, order,  type = 'gsob')
plot(so$bs)
plot(so$os)
#Using the previously generated B-splines and normalizing them
so1 = splinet(Bsplines=so$bs, type = "gsob",norm=TRUE)
plot(so1$bs) #normalized B-splines
plot(so1$os) #the one sided osplines
gm = gramian(so1$os) #evaluation of the inner products
diag(gm)
sum(gm - diag(diag(gm))) #verification of the orghonoalization of the matrix
#-----------------------------------------------------#
#---Gram-Schmidt osplines, non-equally spaced knots---#
#-----------------------------------------------------#
so = splinet(Bsplines=sody$bs, type = 'gsob') #using previously genereted Bsplines
plot(so$bs)
plot(so$os)
gm = gramian(so$os)
diag(gm)
sum(gm - diag(diag(gm)))
#---------------------------------------------#
#---Twosided osplines, equally spaced knots---#
#---------------------------------------------#
so = splinet(Bsplines=bs$bs, type = 'twob')
plot(so$os)
gm = gramian(so$os) #verification of the orthogonality
diag(gm)
sum(gm - diag(diag(gm)))
#-------------------------------------------------#
#---Twosided osplines, non equally spaced knots---#
#-------------------------------------------------#
so = splinet(Bsplines=sody$bs, type = 'twob')
plot(so$os)
gm = gramian(so$os) #verification of the orthogonality
diag(gm)
sum(gm - diag(diag(gm)))
#-------------------------------------------------------------#
#-------Generating an object from the class 'Splinets'--------#
#-------------------------------------------------------------#
#The most generic generation of an object of class 'Splinets':
sp=new("Splinets") #a generic format for 'Splinets' object
sp
#The most important SLOTs of 'Splinets' (so far only defaults)
sp@knots
sp@smorder
sp@der
sp@supp
n=13;xi=sort(runif(n+2));xi[1]=0;xi[n+2]=1
sp@knots=xi #Randomly assigned knots
#Another way of assigning SLOTs with changing the order of
#smoothness and intializing Taylor coefficients
ssp=new("Splinets",knots=xi,smorder=2)
ssp@taylor
#Equidistant case
ssp=new("Splinets",knots=seq(0,1,1/(n+1)),smorder=3)
ssp@taylor
ssp@equid
#-----------------------------------------------------#
#---------------------Subsampling---------------------#
#-----------------------------------------------------#
#Example with different support ranges, the 3rd order
n=25; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1; k=3
supp=list(t(c(2,12)),t(c(4,20)),t(c(6,25))) #defining support ranges for three splines
#Initial random matrices of the derivative for each spline
SS1=matrix(rnorm((supp[[1]][1,2]-supp[[1]][1,1]+1)*(k+1)),ncol=(k+1))
SS2=matrix(rnorm((supp[[2]][1,2]-supp[[2]][1,1]+1)*(k+1)),ncol=(k+1))
SS3=matrix(rnorm((supp[[3]][1,2]-supp[[3]][1,1]+1)*(k+1)),ncol=(k+1))
spl=construct(xi,k,SS1,supp[[1]]) #constructing the first correct spline
nspl=construct(xi,k,SS2,supp[[2]],'CRFC')
#See 'gather' function for more details on what follows
spl=gather(spl,nspl) #the second and the first ones
nspl=construct(xi,k,SS3,supp[[3]],'CRLC')
spl=gather(spl,nspl) #the third is added
#Replicating by subsampling with replacement
sz=length(spl@der)
ss=sample(1:sz,size=10,rep=TRUE)
spl=subsample(spl,ss)
is.splinets(spl)[[1]]
spl@supp
spl@der
#Subsampling without replacements
ss=c(3,8,1)
sspl=subsample(spl,ss)
sspl@supp
sspl@der
is.splinets(sspl)[[1]]
#A single spline sampled from a 'Splinets' object
is.splinets(subsample(sspl,1))
#-----------------------------------------------------#
#-------Representations of derivatives at knots-------#
#-----------------------------------------------------#
n=10; k=3; xi=seq(0,1,by=1/(n+1)) #the even number of equally spaced knots
S=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))
spl=construct(xi,k,S) #construction of a spline
a=spl@der[[1]]
b=sym2one(a)
aa=sym2one(b,inv=TRUE) # matrix 'aa' is the same as 'a'
n=11; xi2=seq(0,1,by=1/(n+1)) #the odd number of knots case
S2=matrix(rnorm((n+2)*(k+1)),ncol=(k+1))
spl2=construct(xi2,k,S2) #construction of a spline
a2=spl2@der[[1]]
b2=sym2one(a2)
aa2=sym2one(b2, inv=TRUE) # matrix 'aa2' is the same as 'a2'
#-----------------------------------------------------#
#--------------More complex support sets--------------#
#-----------------------------------------------------#
#Zero order splines, non-equidistant case, support with three components
n=43; xi=seq(0,1,by=1/(n+1)); k=3; xi=sort(runif(n+2)); xi[1]=0; xi[n+2]=1;
support=list(matrix(c(2,14,17,30,32,43),ncol=2,byrow = TRUE))
#Third order splines
ssp=new("Splinets",knots=xi,supp=support,smorder=k) #with partial support
m=sum(ssp@supp[[1]][,2]-ssp@supp[[1]][,1]+1) #the total number of knots in the support
ssp@der=list(matrix(rnorm(m*(k+1)),ncol=(k+1)))  #the derivative matrix at random
IS=is.splinets(ssp)
IS$robject@der
IS$robject@supp
b=sym2one(IS$robject@der[[1]],IS$robject@supp[[1]]) #the RHS limits at the knots
a=sym2one(b,IS$robject@supp[[1]],inv=TRUE) #is the same as the SLOT supp in IS@robject
library(Splinets)
library(Splinets)
#-------------------------------------------------------#
#--The support layers of the dyadic structure of bases--#
#-------------------------------------------------------#
k=4 # order
n = 36 # number of the internal knots (excluding the endpoints)
xi = seq(0, 1, length.out = n+2)
spnt=splinet(xi,k)
plot(spnt$os)                #standard plotting
plot(spnt$bs,type='dyadic')  #dyadic format of plots
net=seq2dyad(n-k+1,k)  #retrieving dyadic structure
ind1=c(net[[4]][[1]],net[[4]][[2]])
plot(subsample(spnt$os,ind1))
ind2=c(net[[4]][[3]],net[[4]][[4]]) #accessing the lowest support in the dyadic structure
lines(subsample(spnt$bs,ind2))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
source('~/Box Sync/ToDoNow/Splinets100KP/Splinets/R/fun_seq2dyad.R')
library(Splinets)
#-------------------------------------------------------#
#--The support layers of the dyadic structure of bases--#
#-------------------------------------------------------#
k=4 # order
n = 36 # number of the internal knots (excluding the endpoints)
xi = seq(0, 1, length.out = n+2)
spnt=splinet(xi,k)
plot(spnt$os)                #standard plotting
plot(spnt$bs,type='dyadic')  #dyadic format of plots
net=seq2dyad(n-k+1,k)  #retrieving dyadic structure
ind1=c(net[[4]][[1]],net[[4]][[2]])
plot(subsample(spnt$os,ind1))
ind2=c(net[[4]][[3]],net[[4]][[4]]) #accessing the lowest support in the dyadic structure
lines(subsample(spnt$bs,ind2))
library(Splinets)
library(Splinets)
library(Splinets)
library(Splinets)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Splinets)
matplot(LapTire[,1],LapTire[,2:5],type='l',lty=1)
LapTire=read.csv('/Users/mats-ksp/Box\ Sync/ToDoNow/Rjournal/FiguresProgramming/Data/LStire7.csv',header = F)
LapTruck=read.csv('/Users/mats-ksp/Box\ Sync/ToDoNow/Rjournal/FiguresProgramming/Data/LStruck7.csv',header = F)
Time=read.csv('/Users/mats-ksp/Box\ Sync/ToDoNow/Rjournal/FiguresProgramming/Data/t.csv',header = F)
colnames(LapTire)=NULL
colnames(LapTruck)=NULL
colnames(Time)=NULL
LapTire=t(LapTire) #samples are in columns
LapTruck=t(LapTruck) #samples are in columns
LapTire=cbind(Time,LapTire) #first is argument
LapTruck=cbind(Time,LapTruck)
matplot(LapTire[,1],LapTire[,2:5],type='l',lty=1)
TireProj=project(LapTire[,1:2],knots)
knots=seq(-100,100, by=1)
TireProj=project(LapTire[,1:2],knots)
is.frame(LapTire)
type(LapTire)
typeof(LapTire)
ab=as.matrix(LapTire[,2:5])
ab
LTire=as.matrix(LapTire)
dim(LTire)
LTire=as.matrix(LapTire)
LTruck=as.matrix(LapTruck)
knots=seq(-100,100, by=1)
matplot(LTire[,1],LTire[,2:5],type='l',lty=1)
TireProj=project(LapTire[,1:2],knots)
TireProj=project(LTire[,1:2],knots)
knots
TireProj=project(LTire[,1:2],knots)
proj$basis
new_fdsp
ind_in_range
y[ind_in_range,,drop=F])
y[ind_in_range,,drop=F]
y
sum(ind_in_range)
y[ind_in_range
,]
dim(y)
y
y=fdata[,-1,drop=F]
y[ind_in_range,,drop=F]
TireProj=project(LTire[,1:2],knots)
library(Splinets)
TireProj=project(LTire[,1:2],knots)
plot(TireProj)
plot(TireProj$sp)
lines(Ltire[,1],Ltire[,2],type='l')
lines(LTire[,1],LTire[,2],type='l')
TireProj=project(LTire[,1:20],knots)
TireProj=project(LTire[,1:200],knots)
TireProj=project(LTire,knots)
TruckProj=project(LTruck,knots)
n=length(TruckProj$sp@der)
A=matrix(1/1000,ncol=1000)
MeanTruck=lincomb(TruckProj$sp,A)
plot(MeanTruck)
B=matrix(1,nrow=4095,ncol=1001)
B[,1001]=-B[,1001]
ResTruck=lincom(gather(TruckProj$sp,MeanTruck),B)
ResTruck=lincomb(gather(TruckProj$sp,MeanTruck),B)
MeanProj=project(MeanTruck,knots)
ProjPlusMean=gather(TruckProj$sp,MeanTruck)
plot(ResTruck,sID=1:10)
plot(TruckProj,sID=1:10)
plot(TruckProj$sp,sID=1:10)
length(TruckProj$sp@der)
lines(MeanTruck)
MeanProj=project(MeanTruck,knots)
ProjMean$coeff
MeanProj$coeff
matrix(1,ncol=5)
a=matrix(1,ncol=5)
rep(a,5)
matrix(1:5,ncol=5)
matrix(1:25,ncol=5)
a=matrix(1:5,ncol=5)
b=matrix(1:25,ncol=5)
a-b
a-rep(b,5)
a=matrix(1:5,nrow=5)
rep(a,5)
a
a=matrix(1:25,nrow=5)
rep(a,5)
matrix(rep(a,5),byrow=T,ncol=5)
dim(MeanProj$coeff)
dim(TruckProj$coeff)
B=matrix(rep(MeanProj$coeff,1000),byrow =T, ncol=1000)
dim(B)
B=matrix(rep(MeanProj$coeff,1000),byrow =T, nrow=1000)
dim(B)
B[1,]
B[2,]
B=matrix(rep(MeanProj$coeff,1000),byrow =T, nrow=1000)
ResTruck3coeff=TruckProj$coeff-B
ResTruckCoeff=TruckProj$coeff-B
ResTruckSp1=lincomb(TruckProj$basis,ResTruck[1,,drop=F])
ResTruckSp1=lincomb(TruckProj$basis,ResTruckCoeff[1,,drop=F])
plot(ResTruckSp1)
ResTruckCoeff=TruckProj$coeff-B
dim(ResTruck)
dim(ResTruckCoeff)
Cov1=t(ResTruckCoeff)%*%ResTruckCoeff/1000
Cov2=cov(TruckProj$coeff)
Cov2[1:2,1]
Cov1[1:2,1]
Cov1[1:3,1]
Cov2[1:3,1]
Cov=cov(TruckProj$coeff)
Spect=eigen(Cov,symmetric = T)
Spect$values
plot(Spect$values)
CMeanTruck=colMeans(TrockProj$coeff)
CMeanTruck=colMeans(TruckProj$coeff)
dim(CMeanTruck)
length(CMeanTruck)
CMeanTruck=as.matrix(colMeans(TruckProj$coeff))
length(CMeanTruck)
dim(CMeanTruck)
CMeanTruck=matrix(colMeans(TruckProj$coeff),ncol=dim(TruckProj$coeff)[2])
dim(CMeanTruck)
MeanTruckSp=lincomb(TruckProj$basis,CMeanTruck)
plot(MeanTruckSp)
lines(MeanTruck,col='red')
plot(Spect$values, type =l )
plot(Spect$values, type ='l' )
dim(Spect$vectors)
EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec))
EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec[1:50,]))
EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec[,1:50]))
plot(EigenTruckSp)
plot(EigenTruckSp,sID=1:5)
matplot(LapTire[,1],LapTire[,2],type='l',lty=1)
lines(TruckProj$sp,sID=1)
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
lines(TruckProj$sp,sID=1)
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec[,1:50]
dim(C)
EgnFncts50=subsample(EigenTruckSp,1:50)
lines(lincomb(EgnFncts50,C))
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
lines(lincomb(EgnFncts50,C),col='green')
EgnFncts5=subsample(EigenTruckSp,1:5)
lines(lincomb(EgnFncts5,TruckProj$coeff[1,,drop=F]%*%Spect$vec[,1:5]),col='blue')
EgnFncts5=subsample(EigenTruckSp,1:100)
EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec[,1:100]))
EgnFncts5=subsample(EigenTruckSp,1:100)
lines(lincomb(EgnFncts5,TruckProj$coeff[1,,drop=F]%*%Spect$vec[,1:100]),col='blue')
plot(MeanTruckSp)
lines(TruckProj$sp,sID=1:10)
plot(MeanTruckSp)
lines(TruckProj$sp,sID=1:5)
plot(MeanTruckSp, lwd=2)
lines(TruckProj$sp,sID=1:5,lty=2)
plot(TruckProj$sp,sID=1:5,lty=3)
lines(MeanTruckSp, lwd=3)
matplot(LapTire[,1],LapTire[,2:4],type='l',lty=1,col='black')
plot(TruckProj$sp,sID=1:3,lty=3)
lines(MeanTruckSp, lwd=3)
matplot(LapTire[,1],LapTire[,2:4],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:3,lty=3)
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTire[,2:4],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:3,lty=3)
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:4],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:3,lty=3)
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:2,lty=3,col='red')
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:2,lty=3,col=c('red','red'))
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1:2,lty=3,col=c('red','red','red'))
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1,lty=3,col=c('red'))
lines(TruckProj$sp,sID=2,lty=3,col=c('red'))
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col='black')
lines(TruckProj$sp,sID=1,lty=3,col=c('black'))
lines(TruckProj$sp,sID=2,lty=3,col=c('black'))
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col=c('red'))
lines(TruckProj$sp,sID=1,lty=3,col=c('black'))
lines(TruckProj$sp,sID=2,lty=3,col=c('black'))
lines(MeanTruckSp, lwd=3)
matplot(LapTruck[,1],LapTruck[,2:3],type='l',lty=1,col=c('red'),xlab='',ylab='')
lines(TruckProj$sp,sID=1,lty=3,col=c('black'))
lines(TruckProj$sp,sID=2,lty=3,col=c('black'))
lines(MeanTruckSp, lwd=3)
plot(Spect$values, type ='l',col='blue', lwd=4 )
EigenTruckSp=lincomb(TruckProj$basis,t(Spect$vec))
plot(EigenTruckSp,sID=1:5) #The first largest eigen functions
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec[,1:50]
EgnFncts10=subsample(EigenTruckSp,1:10)
EgnFncts50=subsample(EigenTruckSp,1:50)
EgnFncts100=subsample(EigenTruckSp,1:100)
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10]),col='green')
lines(lincomb(EgnFncts50,C[,1:50]),col='blue')
lines(lincomb(EgnFncts50,C[,1:100]),col='brown')
C[,1:10]
lines(lincomb(EgnFncts10,C[,1:10]),col='green')
C[,1:10]
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue')
lines(lincomb(EgnFncts50,C[,1:100],drop=F),col='brown')
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue')
lines(lincomb(EgnFncts50,C[,1:100,drop=F]),col='brown')
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1)
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue')
lines(lincomb(EgnFncts100,C[,1:100,drop=F]),col='brown')
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1,xlab='',ylab='')
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue')
lines(lincomb(EgnFncts100,C[,1:100,drop=F]),col='brown',lwd=0.5)
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1,xlab='',ylab='')
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue',lwd=1)
lines(lincomb(EgnFncts100,C[,1:100,drop=F]),col='brown',lwd=1.5)
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1,xlab='',ylab='')
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2,lwd=1)
#The spline projected data
C=TruckProj$coeff[1,,drop=F]%*%Spect$vec
lines(lincomb(EgnFncts10,C[,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[,1:50,drop=F]),col='blue',lwd=1)
lines(lincomb(EgnFncts100,C[,1:100,drop=F]),col='brown',lwd=1.5)
#The original data
matplot(LapTruck[,1],LapTruck[,2],type='l',lty=1,xlab='',ylab='')
#The spline data
lines(TruckProj$sp,sID=1,col='red',lty=2,lwd=1)
#The spline projected data
C=TruckProj$coeff%*%Spect$vec
lines(lincomb(EgnFncts10,C[1,1:10,drop=F]),col='green')
lines(lincomb(EgnFncts50,C[1,1:50,drop=F]),col='blue',lwd=1)
lines(lincomb(EgnFncts100,C[1,1:100,drop=F]),col='brown',lwd=1.5)
hist(C[,1]/sqrt(Spect[1]))
Spect[1]
hist(C[,1]/sqrt(Spect$values[1]))
plot(C[,1]/sqrt(Spect$values[1]),C[,2]/sqrt(Spect$values[2]))
a=matrix(rnorm(2000),ncol=2)
points(a[,1],a[,2],col='red',pch='*')
plot(C[,1]/sqrt(Spect$values[1]),C[,2]/sqrt(Spect$values[2]),xlab='',ylab='')
mean(C[,1]/sqrt(Spect$values[1]))
mean(C[,2]/sqrt(Spect$values[2]))
var(C[,2]/sqrt(Spect$values[2]))
var(C[,1]/sqrt(Spect$values[1]))
MeanTruck=matrix(colMeans(TruckProj$coeff),ncol=dim(TruckProj$coeff)[2])
MeanTruckSp=lincomb(TruckProj$basis,MeanTruck)
View(MeanTruck)
1/sqrt(Spect$values)
Z1=(C[,1]-matrix(MeanProj%*%Spect$vec[,1],nrow=1000))/sqrt(Spect$values[1])
Z1=(C[,1]-matrix(MeanTruck%*%Spect$vec[,1],nrow=1000))/sqrt(Spect$values[1])
mean(Z1)
var(Z1)
Z1=(C[,1]-matrix(MeanTruck%*%Spect$vec[,1],nrow=1000))/sqrt(Spect$values[1])
Z2=(C[,2]-matrix(MeanTruck%*%Spect$vec[,2],nrow=1000))/sqrt(Spect$values[2])
plot(Z1,Z2,xlab='',ylab='')
a=matrix(rnorm(2000),ncol=2)
points(a[,1],a[,2],col='red',pch='*')
plot(Z1,Z2,xlab='',ylab='')
a=matrix(rnorm(2000),ncol=2)
points(a[,1],a[,2],col='red',pch='.')
plot(Z1,Z2,xlab='',ylab='',pch='*')
a=matrix(rnorm(2000),ncol=2)
points(a[,1],a[,2],col='red',pch='.')
plot(Z1,Z2,xlab='',ylab='',pch='*')
points(a[,1],a[,2],col='red',pch='+')
plot(Z1,Z2,xlab='',ylab='',pch=22)
points(a[,1],a[,2],col='red',pch=17,)
plot(Z1,Z2,xlab='',ylab='',pch=17)
points(a[,1],a[,2],pch=22,)
plot(Z1,Z2,xlab='',ylab='',pch=17,col='red')
points(a[,1],a[,2],pch=22,)
